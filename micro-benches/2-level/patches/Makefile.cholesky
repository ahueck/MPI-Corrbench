TARGET=clang
MPICC ?= OMPI_CC=clang mpicc
MPICXX ?= OMPI_CXX=clang++ mpic++
MKLROOT ?= /shared/apps/intel/2020.4/mkl
CFLAGS  += -I$(MKLROOT)/include -O3 -I./ -std=gnu99  -fopenmp -g -fopenmp-version=50
LDFLAGS += -fopenmp -L$(MKLROOT)/lib/intel64 -Wl,--rpath,$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lpthread -lm -ldl
DETACH_LDFLAGS = -L. -Wl,--rpath,$(PWD) -ldetach_$(TARGET)
DETACH_CXXFLAGS = -DOMPI_SKIP_MPICXX=1 -g -O3 -std=c++14

SRC=ch_ompss.c ch_common.c
OBJECTS = $(SRC:.c=.o)

DETACH_SRC=detach.cpp
DETACH_OBJ=$(DETACH_SRC:.cpp=.o)

TIDY_OBJECTS_C = $(SRC:.c=.ct)
TIDY_OBJECTS_CPP = $(DETACH_SRC:.cpp=.cppt)
TIDY_MPI_CFLAGS = $(shell mpicc --showme:compile)
TIDY_MPI_CXXFLAGS = $(shell mpicxx --showme:compile)

BC_OBJECTS_C = $(SRC:.c=.bc)
BC_OBJECTS_CPP = $(DETACH_SRC:.cpp=.bcpp)

all : cholesky_$(TARGET)_fine

.c.o: $(SRC)
	$(MPICC) $(CFLAGS) -c $< -o $@ 

cholesky_$(TARGET)_fine: $(OBJECTS) libdetach_$(TARGET).so
	$(MPICC) $(OBJECTS) $(LDFLAGS) $(DETACH_LDFLAGS) -o $@

.cpp.o: $(DETACH_SRC)
	$(MPICXX) $(DETACH_CXXFLAGS) -fPIC -c $< -o $@

libdetach_$(TARGET).so: $(DETACH_OBJ)
	$(MPICXX) -shared $< -o $@

$(TIDY_OBJECTS_C): %.ct: %.c
	clang-tidy $< -checks='-*,*mpi*' -- $(TIDY_MPI_CFLAGS) $(CFLAGS)

$(TIDY_OBJECTS_CPP): %.cppt: %.cpp
	clang-tidy $< -checks='-*,*mpi*' -- $(TIDY_MPI_CXXFLAGS) $(DETACH_CXXFLAGS)

tidy-target: $(TIDY_OBJECTS_CPP) $(TIDY_OBJECTS_C)
	@echo "Running Clang Tidy"
	@echo "processed $(TIDY_OBJECTS_C) $(TIDY_OBJECTS_CPP)"

$(BC_OBJECTS_C): %.bc: %.c
	clang -emit-llvm $(CFLAGS) $(TIDY_MPI_CFLAGS) -c $< -o $@

$(BC_OBJECTS_CPP): %.bcpp: %.cpp
	clang++ -emit-llvm $(DETACH_CXXFLAGS) $(TIDY_MPI_CXXFLAGS) -c $< -o $@

parcoach-target: $(BC_OBJECTS_C) $(BC_OBJECTS_CPP)
	llvm-link $(BC_OBJECTS_C) $(BC_OBJECTS_CPP) -o cholesky_$(TARGET)_fine.bc
	opt -load $(PARCOACH_ROOT)/lib/aSSA.* -parcoach -check-mpi cholesky_$(TARGET)_fine.bc

clean:
	rm -f *.o cholesky_$(TARGET)_fine libdetach_$(TARGET).so *.bc *.bcpp

